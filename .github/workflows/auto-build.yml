name: Auto build Aseprite

on:
  push:
    branches: main
  workflow_dispatch:

permissions:
  contents: write

jobs:
  auto-build:
    name: Auto build Aseprite for Windows x64
    runs-on: windows-2022

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Python requirements
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Download Aseprite
        shell: pwsh
        run: |
          python download.py

      - name: Setup Ninja
        uses: ashutoshvarma/setup-ninja@v1.1

      - name: Setup MSVC Developer Command Prompt
        uses: TheMrMilchmann/setup-msvc-dev@v3
        with:
          arch: x64

      - name: Install OpenSSL (Chocolatey)
        shell: pwsh
        run: |
          choco install openssl -y --no-progress
          if (Get-Command refreshenv -ErrorAction SilentlyContinue) { refreshenv }
          Write-Host "Searching for installed OpenSSL libcrypto DLLs (for debugging):"
          Get-ChildItem 'C:\Program Files' -Recurse -Filter 'libcrypto*.dll' -ErrorAction SilentlyContinue | Select-Object -First 10 | ForEach-Object { Write-Host $_.FullName }

      - name: Build Aseprite
        shell: pwsh
        run: |
          mkdir build
          cd build
          cmake "${{ github.workspace }}/src/aseprite" -G Ninja -DCMAKE_BUILD_TYPE=MinSizeRel -DLAF_BACKEND=skia -DSKIA_DIR="${{ github.workspace }}/src/skia" -DSKIA_LIBRARY_DIR="${{ github.workspace }}/src/skia/out/Release-x64" -DSKIA_LIBRARY="${{ github.workspace }}/src/skia/out/Release-x64/skia.lib"
          cmake --build . --config MinSizeRel --target aseprite
          # ensure build/bin exists
          New-Item -ItemType Directory -Force -Path ./bin | Out-Null

      - name: Copy OpenSSL libcrypto DLL to build/bin
        shell: pwsh
        run: |
          # Common OpenSSL install paths on the runner
          $candidates = @(
            'C:\Program Files\OpenSSL-Win64\bin\libcrypto-1_1-x64.dll',
            'C:\Program Files\OpenSSL-Win64\bin\libcrypto-3-x64.dll',
            'C:\Program Files\OpenSSL-Win64\bin\libcrypto.dll',
            'C:\Program Files\OpenSSL\bin\libcrypto-1_1-x64.dll',
            'C:\Program Files\OpenSSL\bin\libcrypto-3-x64.dll'
          )
          $copied = $false
          foreach ($p in $candidates) {
            if (Test-Path $p) {
              Copy-Item $p ./build/bin -Force
              Write-Host "Copied $p to build/bin"
              $copied = $true
              break
            }
          }
          if (-not $copied) {
            # fallback: search for any libcrypto*.dll under Program Files and copy the first match
            $found = Get-ChildItem 'C:\Program Files' -Recurse -Filter 'libcrypto*.dll' -ErrorAction SilentlyContinue | Select-Object -First 1
            if ($found) {
              Copy-Item $found.FullName ./build/bin -Force
              Write-Host "Copied $($found.FullName) to build/bin"
              $copied = $true
            }
          }
          if (-not $copied) {
            Write-Error "libcrypto DLL not found. Please ensure OpenSSL installed or vendor the required DLL into the repository (e.g. put it in build/bin or a known path)."
            exit 1
          }

      - name: Get version
        id: get_version
        shell: pwsh
        run: |
          $version = Get-Content version.txt
          echo "version=$version" >> $env:GITHUB_OUTPUT

      - name: Zip Aseprite
        shell: pwsh
        run: |
          cd build/bin
          7z a ../../Aseprite-Windows-x64-${{ steps.get_version.outputs.version }}.zip *

      - name: GH Release
        uses: softprops/action-gh-release@v2
        with:
          name: Aseprite-Windows-x64-${{ steps.get_version.outputs.version }}
          tag_name: ${{ steps.get_version.outputs.version }}
          files: |
            Aseprite-Windows-x64-${{ steps.get_version.outputs.version }}.zip
